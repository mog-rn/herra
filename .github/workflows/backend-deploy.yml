name: Backend deploy - GCP

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  PROJECT_ID: songa-386805
  GAR_LOCATION: us-central1
  SERVICE: herra-backend
  REGION: us-central1

defaults:
  run:
    working-directory: backend

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Docker Auth
        run: |
          gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev
          
      - name: Create Entrypoint Script
        run: |
          cat << 'EOF' > entrypoint.sh
          #!/bin/bash

          echo "Waiting for postgres..."
          while ! PGPASSWORD=$DB_PASSWORD psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c '\q' 2>/dev/null; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 1
          done
          echo "PostgreSQL is up - executing migrations"

          echo "Running migrations..."
          python manage.py migrate --noinput

          echo "Starting Gunicorn..."
          exec gunicorn config.wsgi:application --bind 0.0.0.0:$PORT --workers 3 --threads 2 --timeout 0
          EOF
          
          chmod +x entrypoint.sh
          
      - name: Build and Push Container
        env:
          FIREBASE_CREDENTIALS_FILE: ${{ secrets.FIREBASE_CREDENTIALS_FILE }}
        run: |
          echo "${{ secrets.FIREBASE_CREDENTIALS_FILE }}" | base64 --decode > herra-21c5a-firebase-adminsdk-hz2so-d3557f22a3.json
          docker build -t "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE/$SERVICE:$GITHUB_SHA" -f Dockerfile .
          docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE/$SERVICE:$GITHUB_SHA"

      - name: Copy Static Files from Docker Container
        run: |
          container_id=$(docker create "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE/$SERVICE:$GITHUB_SHA")
          docker cp "$container_id:/app/staticfiles" ./staticfiles
          docker rm -v "$container_id"
        
      - name: Upload Static Files to Google Cloud Storage
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
        run: |
          echo "${{ secrets.GCP_CREDENTIALS }}" | base64 --decode > gcs-key.json
          gcloud auth activate-service-account --key-file=gcs-key.json
          
          if [ -d "staticfiles" ] && [ "$(ls -A staticfiles)" ]; then
            gsutil -m rsync -r staticfiles/ gs://herra-static-assets/
          else
            echo "The staticfiles directory is empty or does not exist."
            exit 1
          fi

      - name: Clean failed revisions
        continue-on-error: true
        run: |
          # Get all failed revisions (those marked with X)
          FAILED_REVISIONS=$(gcloud run revisions list \
            --service=$SERVICE \
            --region=$REGION \
            --format="value(metadata.name)" \
            --filter="status.conditions.status!=True")
          
          # Delete failed revisions if any exist
          if [ ! -z "$FAILED_REVISIONS" ]; then
            echo "Deleting failed revisions..."
            echo "$FAILED_REVISIONS" | while read rev; do
              if [ "$rev" != "$(gcloud run services describe $SERVICE --region=$REGION --format='value(status.latestReadyRevisionName)')" ]; then
                gcloud run revisions delete $rev --region=$REGION --quiet || true
              fi
            done
          fi
          
      - name: Deploy to Cloud Run
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: ${{ secrets.DEBUG }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          CSRF_TRUSTED_ORIGINS: ${{ secrets.CSRF_TRUSTED_ORIGINS }}
          SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
          DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
          DJANGO_SETTINGS_MODULE: config.settings
        run: |
          # Deploy to Cloud Run with all environment variables
          gcloud run deploy $SERVICE \
            --image "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$SERVICE/$SERVICE:$GITHUB_SHA" \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --timeout 300 \
            --port 8080 \
            --set-env-vars ^--^SECRET_KEY="$SECRET_KEY" \
            --set-env-vars ^--^DEBUG="$DEBUG" \
            --set-env-vars ^--^DB_NAME="$DB_NAME" \
            --set-env-vars ^--^DB_USER="$DB_USER" \
            --set-env-vars ^--^DB_PASSWORD="$DB_PASSWORD" \
            --set-env-vars ^--^DB_HOST="$DB_HOST" \
            --set-env-vars ^--^DB_PORT="$DB_PORT" \
            --set-env-vars ^--^DJANGO_SETTINGS_MODULE="$DJANGO_SETTINGS_MODULE" \
            --set-env-vars ^--^ALLOWED_HOSTS="$ALLOWED_HOSTS" \
            --set-env-vars ^--^CSRF_TRUSTED_ORIGINS="$CSRF_TRUSTED_ORIGINS"

      - name: Verify Deployment
        run: |
          echo "Verifying deployment configuration..."
          gcloud run services describe $SERVICE \
            --region $REGION \
            --format='yaml(spec.template.spec.containers[0].env)'
          
          echo "Checking service URL..."
          SERVICE_URL=$(gcloud run services describe $SERVICE \
            --region $REGION \
            --format='value(status.url)')
          echo "Service URL: $SERVICE_URL"
          
          echo "Checking service status..."
          gcloud run services describe $SERVICE \
            --region $REGION \
            --format='value(status.conditions)'